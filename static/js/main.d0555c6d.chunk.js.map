{"version":3,"sources":["components/Title/Title.tsx","serviceWorker.ts","Router/Routes.tsx","pages/HomePage/HomePage.tsx","App/App.tsx","index.tsx"],"names":["Title","style","textAlign","fontSize","color","Boolean","window","location","hostname","match","Routes","pages","map","page","exact","path","route","render","component","HomePage","history","useHistory","useState","userName","setUserName","Grid","container","spacing","direction","justify","alignItems","xs","item","TextField","onChange","event","target","value","InputProps","placeholder","marginBottom","Button","onClick","replace","borderColor","backgroundColor","fontWeight","width","TriviaPage","lazy","App","backgroundSize","fallback","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uGAAA,8DAGaA,EAAQ,kBACjB,kBAAC,IAAD,CACIC,MAAO,CACHC,UAAW,SACXC,SAAU,OACVC,MAAO,SAJf,e,+GCQgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4BCHOC,EAAS,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,MACpB,OAAO,oCACFA,EAAMC,KAAI,SAACC,GAAD,OAAU,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAMF,EAAKG,MAAOC,OAAQ,kBAAMJ,EAAKK,kB,gCCIlEC,EAAW,WACpB,IAAIC,EAAUC,cADY,EAEMC,mBAAiB,IAFvB,mBAEnBC,EAFmB,KAETC,EAFS,KAS1B,OAAO,oCACH,kBAACC,EAAA,EAAD,CAAMC,WAAS,EACXC,QAAS,EACTC,UAAU,SACVC,QAAQ,SACRC,WAAW,UACX,kBAACL,EAAA,EAAD,CAAMM,GAAI,IACN,kBAAC/B,EAAA,EAAD,OAEJ,kBAACyB,EAAA,EAAD,CAAMO,MAAI,EAACD,GAAI,IACX,kBAACE,EAAA,EAAD,CACIC,SAfC,SAACC,GACdX,EAAYW,EAAMC,OAAOC,QAebA,MAAOd,EACPe,WAAY,CAAErC,MAAO,CAAEE,SAAU,QACjCoC,YAAa,WACbtC,MAAO,CAAEuC,aAAc,UAG/B,kBAACf,EAAA,EAAD,CAAMO,MAAI,EAACD,GAAI,IACX,kBAACU,EAAA,EAAD,CAAQC,QAAS,kBAAMtB,EAAQuB,QD3CnB,YC2C0C1C,MAAO,CACzD2C,YAAa,QACbxC,MAAO,QACPyC,gBAAiB,OACjB1C,SAAU,MACV2C,WAAY,OACZC,MAAO,SANX,aC5CVC,EAAaC,gBAAK,kBAAM,iCAEjBC,EAAM,WAEjB,OAAO,yBAAKjD,MAAO,CAAEkD,eAAgB,QAASN,gBAAiB,YAC7D,kBAACpB,EAAA,EAAD,CAAMC,WAAS,EACbC,QAAS,EACTE,QAAQ,SACRC,WAAW,UACX,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAQnB,MAAO,CAAC,CACdK,MFXgB,IEYhBE,UAAW,kBAAC,EAAD,OAEb,CACEF,MFdkB,UEelBE,UAAU,kBAAC,WAAD,CAAUkC,SAAY,4CAAuB,kBAACJ,EAAD,eCfjEK,IAASpC,OACL,kBAAC,EAAD,MACFqC,SAASC,eAAe,SJmIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d0555c6d.chunk.js","sourcesContent":["import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nexport const Title = () =>\r\n    <Typography\r\n        style={{\r\n            textAlign: 'center',\r\n            fontSize: '20vh',\r\n            color: 'pink'\r\n        }}>\r\n        SuperQuiz\r\n        </Typography>\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\r\nimport { Route } from 'react-router-dom'\r\nimport TriviaPage from '../pages/TriviaPage/TriviaPage'\r\nimport { HomePage } from '../pages/HomePage/HomePage'\r\n\r\nexport const HOME_ROUTE = '/'\r\nexport const TRIVIA_ROUTE = '/Trivia';\r\n\r\ninterface RouteProps{\r\n    pages:{\r\n        route:string;\r\n        component:JSX.Element;\r\n    }[]\r\n}\r\n\r\nexport const Routes = ({pages}:RouteProps) => {\r\n    return <>\r\n        {pages.map((page)=>  <Route exact path={page.route} render={() => page.component} />)}\r\n    </>\r\n}\r\n\r\n\r\n\r\n\r\n","import React, { useState, ChangeEvent } from \"react\"\r\nimport { Button, TextField, Grid } from \"@material-ui/core\"\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { TRIVIA_ROUTE } from \"../../Router/Routes\";\r\nimport { Title } from \"../../components/Title/Title\";\r\n\r\nconst styles = {\r\n    container: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n    },\r\n    textField: {\r\n        width: 300,\r\n        margin: 100,\r\n    },\r\n    //style for font size\r\n    resize: {\r\n        fontSize: '50'\r\n    },\r\n};\r\n\r\nexport const HomePage = () => {\r\n    let history = useHistory();\r\n    const [userName, setUserName] = useState<string>('');\r\n\r\n\r\n    const onChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setUserName(event.target.value);\r\n    }\r\n\r\n    return <>\r\n        <Grid container\r\n            spacing={1}\r\n            direction='column'\r\n            justify='center'\r\n            alignItems='center'>\r\n            <Grid xs={12}>\r\n                <Title />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <TextField\r\n                    onChange={onChange}\r\n                    value={userName}\r\n                    InputProps={{ style: { fontSize: '5vh' } }}\r\n                    placeholder={'Username'}\r\n                    style={{ marginBottom: '2vh' }}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Button onClick={() => history.replace(TRIVIA_ROUTE)} style={{\r\n                    borderColor: 'black',\r\n                    color: '#ffff',\r\n                    backgroundColor: 'pink',\r\n                    fontSize: '5vh',\r\n                    fontWeight: 'bold',\r\n                    width: '20vw'\r\n                }}>\r\n                    Start\r\n             </Button>\r\n            </Grid>\r\n        </Grid>\r\n    </>\r\n}","import React, { lazy, Suspense } from 'react';\nimport { Grid } from '@material-ui/core';\nimport { BrowserRouter } from 'react-router-dom';\nimport { HOME_ROUTE, TRIVIA_ROUTE, Routes } from '../Router/Routes';\nimport { HomePage } from '../pages/HomePage/HomePage';\nconst TriviaPage = lazy(() => import('../pages/TriviaPage/TriviaPage'));\n\nexport const App = () => {\n  \n  return <div style={{ backgroundSize: 'cover', backgroundColor: '#FF338D', }}>\n    <Grid container\n      spacing={1}\n      justify='center'\n      alignItems='center'>\n      <BrowserRouter>\n        <Routes pages={[{\n          route: HOME_ROUTE,\n          component: <HomePage />,\n        },\n        {\n          route: TRIVIA_ROUTE,\n          component:<Suspense fallback = {<div>Loading...</div>}><TriviaPage/></Suspense>,\n        }]} />\n      </BrowserRouter>\n    </Grid>\n  </div>\n}; \n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport { App } from './App/App';\n\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}